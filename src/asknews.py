import datetime
from asknews_sdk import AskNewsSDK
from config import ASKNEWS_CLIENT_ID, ASKNEWS_SECRET

def get_asknews_context(query):
    ask = AskNewsSDK(
        client_id=ASKNEWS_CLIENT_ID,
        client_secret=ASKNEWS_SECRET,
        scopes=["news"]
    )

    hot_response = ask.news.search_news(
        query=query,
        n_articles=5,
        return_type="both",
        strategy="latest news"
    )

    historical_response = ask.news.search_news(
        query=query,
        n_articles=20,
        return_type="both",
        strategy="news knowledge"
    )

    llm_context = hot_response.as_string + historical_response.as_string
    formatted_articles = format_asknews_context(
        hot_response.as_dicts, historical_response.as_dicts)
    return llm_context, formatted_articles

def format_asknews_context(hot_articles, historical_articles):
    formatted_articles = "Here are the relevant news articles:\n\n"

    if hot_articles:
        hot_articles = [article.__dict__ for article in hot_articles]
        hot_articles = sorted(
            hot_articles, key=lambda x: x['pub_date'], reverse=True)

        for article in hot_articles:
            pub_date = article["pub_date"].strftime("%B %d, %Y %I:%M %p")
            formatted_articles += f"**{article['eng_title']}**\n{article['summary']}\nOriginal language: {article['language']}\nPublish date: {pub_date}\nSource:[{article['source_id']}]({article['article_url']})\n\n"

    if historical_articles:
        historical_articles = [article.__dict__ for article in historical_articles]
        historical_articles = sorted(
            historical_articles, key=lambda x: x['pub_date'], reverse=True)

        for article in historical_articles:
            pub_date = article["pub_date"].strftime("%B %d, %Y %I:%M %p")
            formatted_articles += f"**{article['eng_title']}**\n{article['summary']}\nOriginal language: {article['language']}\nPublish date: {pub_date}\nSource:[{article['source_id']}]({article['article_url']})\n\n"

    if not hot_articles and not historical_articles:
        formatted_articles += "No articles were found.\n\n"
        return formatted_articles

    formatted_articles += f"*Generated by AI at [AskNews](https://asknews.app), check out the [API](https://docs.asknews.app) for more information*."

    return formatted_articles